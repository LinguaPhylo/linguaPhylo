data {
  options = {ageDirection="forward", ageRegex="_(\d+)$"};
  D = readNexus(file="data/H5N1.nex", options=options);
  L = D.nchar();
  taxa = D.taxa();
  // extract traits from the 3rd element
  D_trait = extractTrait(taxa=taxa, sep="_", i=2);
  // locations = D_trait.canonicalStates();
  // 5 locations : Guangdong,HongKong,Hunan,Guangxi,Fujian
  K = D_trait.canonicalStateCount();
  dim = K*(K-1)/2;
  // cannot have a method call to itself inside the model block when data clamping
  dataType = D_trait.dataType();
}
model {
  κ ~ LogNormal(meanlog=1.0, sdlog=1.25);
  π ~ Dirichlet(conc=[2.0,2.0,2.0,2.0]);

  γ ~ LogNormal(meanlog=0.0, sdlog=2.0);
  r ~ DiscretizeGamma(shape=γ, ncat=4, replicates=L);

  Θ ~ LogNormal(meanlog=0.0, sdlog=1.0);
  ψ ~ Coalescent(theta=Θ, taxa=taxa);
  D ~ PhyloCTMC(siteRates=r, Q=hky(kappa=κ, freq=π), mu=0.004, tree=ψ);

  π_trait ~ Dirichlet(conc=rep(element=3.0, times=K));
  // symmetric, rates dimension = n * (n-1) / 2
  R_trait ~ Dirichlet(conc=rep(element=1.0, times=dim));

  I ~ Bernoulli(p=0.5, replicates=dim, minSuccesses=dim-2);
  // S ~ Poisson(lambda=2, offset=K-1, max=dim);
  // I ~ RandomBooleanArray(length=dim, hammingWeight=S);

  // 0.08629747  1.00000000 11.58782503
  μ_trait ~ LogNormal(meanlog=0, sdlog=1.25);

  // construct the GTR instantaneous rate matrix
  Q_trait = generalTimeReversible(freq=π_trait, rates=select(x=R_trait, indicator=I));
  // use the data type of trait alignment extracted from taxa names
  D_trait ~ PhyloCTMC(L=1, Q=Q_trait, mu=μ_trait, tree=ψ, dataType=dataType);
}
