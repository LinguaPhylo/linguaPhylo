data {
  // extract dates
  options={ageDirection="forward", ageRegex=".*\|(\d+\.\d+)$"};
  D = readFasta(file="data/bluff-wedding-cluster.fasta", options=options);

  // Bayesian Skyline
  numGroups = 20;
  taxa = D.taxa();
  w = taxa.length()-1;
  // i starts from 0
  D_trait = extractTrait(taxa=taxa, sep="|", i=1);
  K = D_trait.stateCount();
  dim = K*(K-1)/2;
  dataType = D_trait.dataType();
}
model {
  κ ~ LogNormal(meanlog=1.0, sdlog=1.25);
  π ~ Dirichlet(conc=[1.0,1.0,1.0,1.0]);

  firstValue ~ LogNormal(meanlog=0.0, sdlog=2.0);
  Θ ~ ExpMarkovChain(firstValue=firstValue, n=numGroups);
  groupSizes ~ RandomComposition(n=w, k=numGroups);
  ψ ~ SkylineCoalescent(theta=Θ, taxa=taxa, groupSizes=groupSizes);

  // "7.87e-05" "9.12e-04" "1.06e-02"
  clockRate ~ LogNormal(meanlog=-7.0, sdlog=1.25);
  
  D ~ PhyloCTMC(L=D.nchar(), Q=hky(kappa=κ, freq=π), mu=clockRate, tree=ψ);

  π_trait ~ Dirichlet(conc=rep(element=3.0, times=K));
  // symmetric, rates dimension = n * (n-1) / 2
  R_trait ~ Dirichlet(conc=rep(element=1.0, times=dim));

  // trait indicators
  I ~ Bernoulli(p=0.5, replicates=dim, minSuccesses=dim-2);
//  S ~ Poisson(lambda=2, min=K, max=dim);
//  I ~ RandomBooleanArray(length=dim, hammingWeight=S);

  //μ_trait ~ Gamma(shape=0.001, scale=1000.0);
  μ_trait ~ LogNormal(meanlog=2.0, sdlog=2.0);

  // construct the GTR instantaneous rate matrix
  Q_trait = generalTimeReversible(freq=π_trait, rates=select(x=R_trait, indicator=I));
  // use the data type of trait alignment extracted from taxa names
  D_trait ~ PhyloCTMC(L=1, Q=Q_trait, mu=μ_trait, tree=ψ, dataType=dataType);
}
